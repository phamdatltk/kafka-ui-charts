replicaCount: 1

image:
  # registry: docker.io
  # repository: provectuslabs/kafka-ui
  registry: public.ecr.aws
  repository: provectus/kafka-ui-custom-build
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "4083"
  # tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

existingConfigMap: ""
yamlApplicationConfig:
  # {} 
  kafka:
    clusters:
      - name: kafka_logging
        bootstrapServers: 103.52.112.151:9092
        properties_security_protocol: SASL_PLAINTEXT
        properties_sasl_mechanism: SASL_PLAIN
        # properties_sasl_jaas_config: 'org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="ftVS7tSMgQLL";'

  
  # # kafka:
  # #   clusters:
  # #     - name: yaml
  # #       bootstrapServers: kafka-service:9092
  # spring:
  #   security:
  #     user_name: admin
  #     user_password: datpt72
  # auth:
  #   type: LOGIN_FORM

  # management:
  #   health:
  #     ldap:
  #       enabled: false
yamlApplicationConfigConfigMap: {}
#  keyName: config.yml
#  name: kafka-ui-helm-values
existingSecret: ""
envs:
  secret: {}
  config: {}

networkPolicy:
  enabled: false
  egressRules:
    ## Additional custom egress rules
    ## e.g:
    ## customRules:
    ##   - to:
    ##       - namespaceSelector:
    ##           matchLabels:
    ##             label: example
    customRules: []
  ingressRules:
    ## Additional custom ingress rules
    ## e.g:
    ## customRules:
    ##   - from:
    ##       - namespaceSelector:
    ##           matchLabels:
    ##             label: example
    customRules: []

podAnnotations: {}
podLabels: {}

## Annotations to be added to kafka-ui Deployment
##
annotations: {}

## Set field schema as HTTPS for readines and liveness probe
##
probes:
  useHttpsScheme: false

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  # In case of service type LoadBalancer, you can specify reserved static IP
  # loadBalancerIP: 10.11.12.13
  # if you want to force a specific nodePort. Must be use with service.type=NodePort
  # nodePort:

# Ingress configuration
ingress:
  # Enable ingress resource
  enabled: true

  # Annotations for the Ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-fptcloud-dpaas
    kubernetes.io/ingress.class: fptcloud-dpaas-nginx

  # ingressClassName for the Ingress
  ingressClassName: "fptcloud-dpaas-nginx"

  # The path for the Ingress
  path: "/"

  # The path type for the Ingress
  pathType: "Prefix"  

  # The hostname for the Ingress
  host: "demo-apache-nifi-dpaas.iotpez.com"

  # configs for Ingress TLS
  tls:
    # Enable TLS termination for the Ingress
    enabled: true
    # the name of a pre-created Secret containing a TLS private key and certificate
    secretName: "demo-apache-nifi-dpaas.iotpez.com-tls-secret"

  # HTTP paths to add to the Ingress before the default path
  precedingPaths: []

  # Http paths to add to the Ingress after the default path
  succeedingPaths: []

resources:
  {}
  # limits:
  #   cpu: 200m
  #   memory: 512Mi
  # requests:
  #   cpu: 200m
  #   memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

env: {}

initContainers: {}

volumeMounts: {}

volumes: {}
